/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.demo.horizon.api;

import com.example.demo.horizon.model.Member;
import com.example.demo.horizon.model.MemberSearchInput;
import org.threeten.bp.OffsetDateTime;
import com.example.demo.horizon.model.ResponseFailure;
import com.example.demo.horizon.model.ResponseMembers;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-12-24T01:15:28.003+05:30")

@Api(value = "v1", description = "the v1 API")
public interface V1Api {

    @ApiOperation(value = "member", nickname = "v1MembersMemberIdGet", notes = " * **Purpose**: To retrieve a member (single member returned) * **Prerequisite**: memberId, typically obtained from /members/search * **Validation**: Valid member Id * **Design Pattern**: Synchronous * **Output**: member  * **Error Notification**: Various http errors and faults.  ", response = Member.class, tags={ "Member", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns a single member", response = Member.class),
        @ApiResponse(code = 404, message = "Invalid Input Parameter – Not Authorized for this data", response = ResponseFailure.class),
        @ApiResponse(code = 422, message = "Unprocessable Entity - Used for validation errors.", response = ResponseFailure.class),
        @ApiResponse(code = 500, message = "General internal processing error(s).", response = ResponseFailure.class),
        @ApiResponse(code = 504, message = "API did not receive a response in the stipulated time frame from the backend systems", response = ResponseFailure.class) })
    @RequestMapping(value = "/v1/members/{memberId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Member> v1MembersMemberIdGet(@ApiParam(value = "Unique Member identifier Note: This is a transient value",required=true) @PathVariable("memberId") String memberId,@ApiParam(value = "Name of the client" ,required=true) @RequestHeader(value="X-HZN-ClientName", required=true) String xHZNClientName,@ApiParam(value = "Date/Time from the client in ISO 8601 date format yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" ,required=true) @RequestHeader(value="X-HZN-ClientSubmitDateTime", required=true) OffsetDateTime xHZNClientSubmitDateTime,@ApiParam(value = "Unique client transaction Id" ) @RequestHeader(value="X-HZN-ClientTransactionId", required=false) String xHZNClientTransactionId,@ApiParam(value = "Client session id" ) @RequestHeader(value="X-HZN-ClientSessionId", required=false) String xHZNClientSessionId,@ApiParam(value = "Logged in user id - needed for additional tracking." ) @RequestHeader(value="X-HZN-UserId", required=false) String xHZNUserId,@ApiParam(value = "User role -  Role of the user.  Examples: Subscriber, Member, Member Liaison, Provider, Provider Liaison, Internal User" ) @RequestHeader(value="X-HZN-UserRole", required=false) String xHZNUserRole,@ApiParam(value = "**for internal use only**  Current logged in memberId.  For a B2C process, this value will be set based upon the value in the JWT For a B2B process, this value must either be set by the calling client or from the JWT. Note, if the JWT value is populated, it will override the value passed in by the client." ) @RequestHeader(value="X-HZN-RequestingMemberId", required=false) String xHZNRequestingMemberId,@ApiParam(value = "**for internal use only** An internal identifier for the end to end correlation of the API and its related services." ) @RequestHeader(value="X-HZN-RootId", required=false) String xHZNRootId,@ApiParam(value = "**for internal use only** True if the client has been authorized for internal properties.  Otherwise, the properties marked for **internal only** will not be returned." ) @RequestHeader(value="X-HZN-Internal", required=false) Boolean xHZNInternal);


    @ApiOperation(value = "members", nickname = "v1MembersSearchPost", notes = " * **Purpose**: To retrieve a collection of members based upon the search input * **Prerequisite**: none * **Validation**: Minimum search parameters are sent in ssn or personId or firstName and  lastName (together) are the minimum search parameters * **Design Pattern**: Synchronous * **Output**: collection of members (often just a single member)  * **Error Notification**: Various http errors and faults.  If no records match the search input, a http 200 will be returned with an empty members collection.   ", response = ResponseMembers.class, tags={ "Members", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns a list of member", response = ResponseMembers.class),
        @ApiResponse(code = 404, message = "Invalid Input Parameter – Not Authorized for this data"),
        @ApiResponse(code = 422, message = "Unprocessable Entity - Used for validation errors.", response = ResponseFailure.class),
        @ApiResponse(code = 500, message = "General internal processing error(s).", response = ResponseFailure.class),
        @ApiResponse(code = 504, message = "API did not receive a response in the stipulated time frame from the backend systems", response = ResponseFailure.class) })
    @RequestMapping(value = "/v1/members/search",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ResponseMembers> v1MembersSearchPost(@ApiParam(value = "Name of the client" ,required=true) @RequestHeader(value="X-HZN-ClientName", required=true) String xHZNClientName,@ApiParam(value = "Date/Time from the client in ISO 8601 date format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' \"Z\" - Zulu time" ,required=true) @RequestHeader(value="X-HZN-ClientSubmitDateTime", required=true) OffsetDateTime xHZNClientSubmitDateTime,@ApiParam(value = "" ,required=true )  @Valid @RequestBody MemberSearchInput body,@Min(1)@ApiParam(value = "page number to be returned", defaultValue = "1") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber,@Min(1) @Max(100) @ApiParam(value = "page limit - the number of members per page to be returned", defaultValue = "100") @Valid @RequestParam(value = "pageLimit", required = false, defaultValue="100") Integer pageLimit,@ApiParam(value = "Unique client transaction Id" ) @RequestHeader(value="X-HZN-ClientTransactionId", required=false) String xHZNClientTransactionId,@ApiParam(value = "Client session id" ) @RequestHeader(value="X-HZN-ClientSessionId", required=false) String xHZNClientSessionId,@ApiParam(value = "Logged in user id - needed for additional tracking." ) @RequestHeader(value="X-HZN-UserId", required=false) String xHZNUserId,@ApiParam(value = "User role -  Role of the user.  Examples: Subscriber, Member, Member Liaison, Provider, Provider Liaison, Internal User" ) @RequestHeader(value="X-HZN-UserRole", required=false) String xHZNUserRole,@ApiParam(value = "**for internal use only**  Current logged in memberId.  For a B2C process, this value will be set based upon the value in the JWT For a B2B process, this value must either be set by the calling client or from the JWT. Note, if the JWT value is populated, it will override the value passed in by the client." ) @RequestHeader(value="X-HZN-RequestingMemberId", required=false) String xHZNRequestingMemberId,@ApiParam(value = "**for internal use only** An internal identifier for the end to end correlation of the API and its related services." ) @RequestHeader(value="X-HZN-RootId", required=false) String xHZNRootId,@ApiParam(value = "**for internal use only** True if the client has been authorized for internal properties.  Otherwise, the properties marked for **internal only** will not be returned." ) @RequestHeader(value="X-HZN-Internal", required=false) Boolean xHZNInternal);

}
