package com.example.demo.horizon.model;

import java.util.Objects;
import com.example.demo.horizon.model.Address;
import com.example.demo.horizon.model.Plan;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.LocalDate;
import org.springframework.validation.annotation.Validated;
import javax.validation.Valid;
import javax.validation.constraints.*;

/**
 * Input for a member search. * Conditional search of ssn or personId or medicareBeneficiaryIdentifier or firstName and lastName (together) are the minimum search parameters.  * When subGroupNumber is passed mainGroupNumber is required.
 */
@ApiModel(description = "Input for a member search. * Conditional search of ssn or personId or medicareBeneficiaryIdentifier or firstName and lastName (together) are the minimum search parameters.  * When subGroupNumber is passed mainGroupNumber is required.")
@Validated
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-12-24T01:15:28.003+05:30")

public class MemberSearchInputElastic   {
  @JsonProperty("personId")
  private String personId = null;

  @JsonProperty("firstName")
  private String firstName = null;

  @JsonProperty("middleName")
  private String middleName = null;

  @JsonProperty("lastName")
  private String lastName = null;

  @JsonProperty("dob")
  private LocalDate dob = null;

  @JsonProperty("ssn")
  private String ssn = null;

  @JsonProperty("medicareBeneficiaryIdentifier")
  private String medicareBeneficiaryIdentifier = null;

  @JsonProperty("gender")
  private String gender = null;

  @JsonProperty("mainGroupNumber")
  private String mainGroupNumber = null;

  @JsonProperty("subGroupNumber")
  private String subGroupNumber = null;

  @JsonProperty("address")
  private Address address = null;

  @JsonProperty("plan")
  private Plan plan = null;

  @JsonProperty("sort")
  private String sort = null;

  public MemberSearchInputElastic personId(String personId) {
    this.personId = personId;
    return this;
  }

  /**
   * Member's unique identifier.   MDM Original GUID generated by MDM .Its unique at an individual level .   Conditional search of personId or firstName, lastName and dob are the minimum search parameters
   * @return personId
  **/
  @ApiModelProperty(value = "Member's unique identifier.   MDM Original GUID generated by MDM .Its unique at an individual level .   Conditional search of personId or firstName, lastName and dob are the minimum search parameters")


  public String getPersonId() {
    return personId;
  }

  public void setPersonId(String personId) {
    this.personId = personId;
  }

  public MemberSearchInputElastic firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * For wildcard search client will pass name with wildcard '%'.  Wildcard search must have at least a 1 character limit before the ‘%’ for a wild card search. Wildcard  character can be at any position in the string following the first character. A wildcard character of '?' can be passed to match to a single character.  Note: The members  firstName and lastName information is indexed at both the MDM  (golden record) and source grain levels.  This is used for optimized name matching. Whenever a match is found  it is the golden record that will be be returned.  For example, if search comes in with firstName Edmundo and for a given member golden record has ‘Ed’ and NMS record has ‘Edmund’ and NASCO record has ‘Edmundo’ will match on NASCO record. The golden record having Ed will be returned
   * @return firstName
  **/
  @ApiModelProperty(example = "* firstName= Jo% will match John, Joe, Jonathan, Jona * firstName= Jo%n% will match John and Johnathan but not Jona, Joe, Jona * firstName=Jon? will match Jona only", value = "For wildcard search client will pass name with wildcard '%'.  Wildcard search must have at least a 1 character limit before the ‘%’ for a wild card search. Wildcard  character can be at any position in the string following the first character. A wildcard character of '?' can be passed to match to a single character.  Note: The members  firstName and lastName information is indexed at both the MDM  (golden record) and source grain levels.  This is used for optimized name matching. Whenever a match is found  it is the golden record that will be be returned.  For example, if search comes in with firstName Edmundo and for a given member golden record has ‘Ed’ and NMS record has ‘Edmund’ and NASCO record has ‘Edmundo’ will match on NASCO record. The golden record having Ed will be returned")

@Size(min=1) 
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public MemberSearchInputElastic middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  /**
   * Member's middle name.  This will be a wildcard search so that a single letter can be sent in to match a middle inital or full middle name.
   * @return middleName
  **/
  @ApiModelProperty(value = "Member's middle name.  This will be a wildcard search so that a single letter can be sent in to match a middle inital or full middle name.")


  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }

  public MemberSearchInputElastic lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * For wildcard search client will pass name with wildcard '%'.  Wildcard search must have at least a 1 character limit before the ‘%’ for a wild card search. Wildcard  character can be at any position in the string following the first character. A wildcard character of '?' can be passed to match to a single character.
   * @return lastName
  **/
  @ApiModelProperty(example = "* lastName= Do% will match Doe, Donaldson * lastName= Do%s will match Donaldson, but not Doe * lastName=D?e will match Doe only", value = "For wildcard search client will pass name with wildcard '%'.  Wildcard search must have at least a 1 character limit before the ‘%’ for a wild card search. Wildcard  character can be at any position in the string following the first character. A wildcard character of '?' can be passed to match to a single character.")

@Size(min=1) 
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public MemberSearchInputElastic dob(LocalDate dob) {
    this.dob = dob;
    return this;
  }

  /**
   * Member's Date of Birth - exact match.   **Format ISO 8601 date in the format yyyy-MM-dd**  Conditional search of memberId or firstName, lastName and dob are the minimum search parameters
   * @return dob
  **/
  @ApiModelProperty(value = "Member's Date of Birth - exact match.   **Format ISO 8601 date in the format yyyy-MM-dd**  Conditional search of memberId or firstName, lastName and dob are the minimum search parameters")

  @Valid

  public LocalDate getDob() {
    return dob;
  }

  public void setDob(LocalDate dob) {
    this.dob = dob;
  }

  public MemberSearchInputElastic ssn(String ssn) {
    this.ssn = ssn;
    return this;
  }

  /**
   * Member's ssn.   Format nnnnnnnnn. When passed must not be blank or  have any of the below combinations:  * 000000000 * 111111111 * 123456789 * 222222222 * 333333333 * 444444444 * 555555555 * 666666666 * 777777777 * 888888888 * 999999999 * 987654321
   * @return ssn
  **/
  @ApiModelProperty(value = "Member's ssn.   Format nnnnnnnnn. When passed must not be blank or  have any of the below combinations:  * 000000000 * 111111111 * 123456789 * 222222222 * 333333333 * 444444444 * 555555555 * 666666666 * 777777777 * 888888888 * 999999999 * 987654321")


  public String getSsn() {
    return ssn;
  }

  public void setSsn(String ssn) {
    this.ssn = ssn;
  }

  public MemberSearchInputElastic medicareBeneficiaryIdentifier(String medicareBeneficiaryIdentifier) {
    this.medicareBeneficiaryIdentifier = medicareBeneficiaryIdentifier;
    return this;
  }

  /**
   * Medicare Beneficiary Identifier (MBI) This replaces the medicareNumber
   * @return medicareBeneficiaryIdentifier
  **/
  @ApiModelProperty(value = "Medicare Beneficiary Identifier (MBI) This replaces the medicareNumber")


  public String getMedicareBeneficiaryIdentifier() {
    return medicareBeneficiaryIdentifier;
  }

  public void setMedicareBeneficiaryIdentifier(String medicareBeneficiaryIdentifier) {
    this.medicareBeneficiaryIdentifier = medicareBeneficiaryIdentifier;
  }

  public MemberSearchInputElastic gender(String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Member's gender.   Values: * Female * Male * Ambiguous * Not Applicable * Other * Unknown
   * @return gender
  **/
  @ApiModelProperty(value = "Member's gender.   Values: * Female * Male * Ambiguous * Not Applicable * Other * Unknown")


  public String getGender() {
    return gender;
  }

  public void setGender(String gender) {
    this.gender = gender;
  }

  public MemberSearchInputElastic mainGroupNumber(String mainGroupNumber) {
    this.mainGroupNumber = mainGroupNumber;
    return this;
  }

  /**
   * 7 digit group Number
   * @return mainGroupNumber
  **/
  @ApiModelProperty(example = "85195.0", value = "7 digit group Number")

@Size(min=7,max=7) 
  public String getMainGroupNumber() {
    return mainGroupNumber;
  }

  public void setMainGroupNumber(String mainGroupNumber) {
    this.mainGroupNumber = mainGroupNumber;
  }

  public MemberSearchInputElastic subGroupNumber(String subGroupNumber) {
    this.subGroupNumber = subGroupNumber;
    return this;
  }

  /**
   * 4 digit subGroup Number
   * @return subGroupNumber
  **/
  @ApiModelProperty(example = "0033", value = "4 digit subGroup Number")

@Size(min=4,max=4) 
  public String getSubGroupNumber() {
    return subGroupNumber;
  }

  public void setSubGroupNumber(String subGroupNumber) {
    this.subGroupNumber = subGroupNumber;
  }

  public MemberSearchInputElastic address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
  **/
  @ApiModelProperty(value = "")

  @Valid

  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }

  public MemberSearchInputElastic plan(Plan plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Get plan
   * @return plan
  **/
  @ApiModelProperty(value = "")

  @Valid

  public Plan getPlan() {
    return plan;
  }

  public void setPlan(Plan plan) {
    this.plan = plan;
  }

  public MemberSearchInputElastic sort(String sort) {
    this.sort = sort;
    return this;
  }

  /**
   * Sort order for result set of paged response  * Format  ‘-’ for descending and a ‘+’  (or blank)(default) for ascending  as the sort order followed by the element name.     * The result set is sorted in its entirety  in the order the comma delimited elements are received before returning a given page.   * If no sort parameter is passed, the result set will **not** be sorted.  * Current  supported elements include firstName, lastName, dob. If an element name passed is other than firstName, lastName, dob  then a 422 validation error is returned.  * Any  embedded space(s)  present within the search condition before or after ‘+’ or ‘-‘ or ‘,’ will be ignored and will not impact the sorting.
   * @return sort
  **/
  @ApiModelProperty(example = "+firstName, +lastName, +dob   (order by firstName, lastName, dob all in ascending order)", value = "Sort order for result set of paged response  * Format  ‘-’ for descending and a ‘+’  (or blank)(default) for ascending  as the sort order followed by the element name.     * The result set is sorted in its entirety  in the order the comma delimited elements are received before returning a given page.   * If no sort parameter is passed, the result set will **not** be sorted.  * Current  supported elements include firstName, lastName, dob. If an element name passed is other than firstName, lastName, dob  then a 422 validation error is returned.  * Any  embedded space(s)  present within the search condition before or after ‘+’ or ‘-‘ or ‘,’ will be ignored and will not impact the sorting.")


  public String getSort() {
    return sort;
  }

  public void setSort(String sort) {
    this.sort = sort;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MemberSearchInputElastic memberSearchInputElastic = (MemberSearchInputElastic) o;
    return Objects.equals(this.personId, memberSearchInputElastic.personId) &&
        Objects.equals(this.firstName, memberSearchInputElastic.firstName) &&
        Objects.equals(this.middleName, memberSearchInputElastic.middleName) &&
        Objects.equals(this.lastName, memberSearchInputElastic.lastName) &&
        Objects.equals(this.dob, memberSearchInputElastic.dob) &&
        Objects.equals(this.ssn, memberSearchInputElastic.ssn) &&
        Objects.equals(this.medicareBeneficiaryIdentifier, memberSearchInputElastic.medicareBeneficiaryIdentifier) &&
        Objects.equals(this.gender, memberSearchInputElastic.gender) &&
        Objects.equals(this.mainGroupNumber, memberSearchInputElastic.mainGroupNumber) &&
        Objects.equals(this.subGroupNumber, memberSearchInputElastic.subGroupNumber) &&
        Objects.equals(this.address, memberSearchInputElastic.address) &&
        Objects.equals(this.plan, memberSearchInputElastic.plan) &&
        Objects.equals(this.sort, memberSearchInputElastic.sort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(personId, firstName, middleName, lastName, dob, ssn, medicareBeneficiaryIdentifier, gender, mainGroupNumber, subGroupNumber, address, plan, sort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MemberSearchInputElastic {\n");
    
    sb.append("    personId: ").append(toIndentedString(personId)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    dob: ").append(toIndentedString(dob)).append("\n");
    sb.append("    ssn: ").append(toIndentedString(ssn)).append("\n");
    sb.append("    medicareBeneficiaryIdentifier: ").append(toIndentedString(medicareBeneficiaryIdentifier)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    mainGroupNumber: ").append(toIndentedString(mainGroupNumber)).append("\n");
    sb.append("    subGroupNumber: ").append(toIndentedString(subGroupNumber)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

